pub mod chacha20;
pub mod poly1305;

use std::convert::TryInto;

pub fn chacha20_aead_encrypt(
    aad: &[u8],
    key: [u8; 32],
    iv: [u8; 8],
    constant: [u8; 4],
    plaintext: &[u8],
) -> (Vec<u8>, [u8; 16]) {
    let mut c = constant.to_vec();
    c.extend_from_slice(&iv);
    let nonce: [u8; 12] = c.try_into().unwrap();
    let otk = poly1305_key_gen(key, nonce);
    let ciphertext = chacha20::chacha20_encrypt(key, 1u64, nonce, plaintext);
    // mac_data = aad | pad16(aad)
    let mut mac_data: Vec<u8> = vec![];
    let mut a = aad.to_vec();
    a.resize(pad16_len(aad), 0);
    mac_data.extend_from_slice(&a);
    // mac_data |= ciphertext | pad16(ciphertext)
    let mut c = ciphertext.clone();
    c.resize(pad16_len(&ciphertext), 0);
    mac_data.extend_from_slice(&c);
    //  mac_data |= num_to_8_le_bytes(aad.length)
    let a: [u8; 8] = aad.len().to_le_bytes();
    mac_data.extend_from_slice(&a);
    // mac_data |= num_to_8_le_bytes(ciphertext.length)
    let c: [u8; 8] = ciphertext.len().to_le_bytes();
    mac_data.extend_from_slice(&c);

    let tag = poly1305::poly1305_mac(&mac_data, otk);
    (ciphertext, tag)
}

pub fn chacha20_aead_decrypt(
    aad: &[u8],
    key: [u8; 32],
    iv: [u8; 8],
    constant: [u8; 4],
    ciphertext: &[u8],
) -> (Vec<u8>, [u8; 16]) {
    chacha20_aead_encrypt(aad, key, iv, constant, ciphertext)
}

fn poly1305_key_gen(key: [u8; 32], nonce: [u8; 12]) -> [u8; 32] {
    chacha20::chacha20_block(key, 0u64, nonce)[0..32]
        .try_into()
        .unwrap()
}

fn pad16_len(x: &[u8]) -> usize {
    if x.len() % 16 == 0 {
        x.len()
    } else {
        x.len() + (16 - x.len() % 16)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_poly1305_key_gen() {
        // https://datatracker.ietf.org/doc/html/rfc8439#section-2.6.2
        let key: [u8; 32] = [
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d,
            0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b,
            0x9c, 0x9d, 0x9e, 0x9f,
        ];
        let nonce: [u8; 12] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        ];
        let expected: [u8; 32] = [
            0x8a, 0xd5, 0xa0, 0x8b, 0x90, 0x5f, 0x81, 0xcc, 0x81, 0x50, 0x40, 0x27, 0x4a, 0xb2,
            0x94, 0x71, 0xa8, 0x33, 0xb6, 0x37, 0xe3, 0xfd, 0x0d, 0xa5, 0x08, 0xdb, 0xb8, 0xe2,
            0xfd, 0xd1, 0xa6, 0x46,
        ];

        assert_eq!(poly1305_key_gen(key, nonce), expected);
    }

    #[test]
    fn test_chacha20_aead_encrypt() {
        // https://datatracker.ietf.org/doc/html/rfc8439#section-2.8.2
        let plaintext: &[u8] = &[
            0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e,
            0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
            0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20,
            0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
            0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
            0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
            0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72,
            0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
            0x74, 0x2e,
        ];
        let aad: &[u8] = &[
            0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
        ];
        let key: [u8; 32] = [
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d,
            0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b,
            0x9c, 0x9d, 0x9e, 0x9f,
        ];
        let iv: [u8; 8] = [0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47];
        let constant: [u8; 4] = [0x07, 0x00, 0x00, 0x00];
        let expected: (Vec<u8>, [u8; 16]) = (
            vec![
                0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef,
                0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7,
                0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa,
                0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
                0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77,
                0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4,
                0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4,
                0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
                0x61, 0x16,
            ],
            [
                0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60,
                0x06, 0x91,
            ],
        );

        assert_eq!(
            chacha20_aead_encrypt(aad, key, iv, constant, plaintext),
            expected
        );
    }
}
